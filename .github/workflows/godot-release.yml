name: Build Godot Project

# Trigger on pushes to any branch and on pull requests
on:
  push:
  pull_request:

jobs:
  build:
    # Use a matrix strategy to build on different OSes
    strategy:
      matrix:
        include:
          - platform: Windows
            os: windows-latest
            preset: "Windows Desktop" # MUST match name in export_presets.cfg
            artifact_name: game-windows # Name for the output folder and artifact
            output_name: game.exe # Expected executable name within the folder

          - platform: Linux
            os: ubuntu-latest
            preset: "Linux/X11" # MUST match name in export_presets.cfg
            artifact_name: game-linux
            output_name: game # Expected executable name within the folder

          - platform: macOS
            os: macos-latest
            preset: "macOS" # MUST match name in export_presets.cfg
            artifact_name: game-macos
            # macOS often exports a .app folder, we'll zip that later
            # The godot command still needs a base name for potential files
            output_name: game

    # Define the runner OS based on the matrix
    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        # Use LFS if your project uses Git LFS for large assets
        # with:
        #   lfs: true

      - name: Set up Godot
        uses: godotengine/godot-ci@v4
        with:
          # Ensure this matches your project's Godot version
          godot-version: 4.4.1
          # Only download export templates, not the full editor (faster)
          export-templates-only: true

      - name: Build Project (${{ matrix.platform }})
        run: |
          # Create the specific output directory, e.g., build/game-windows
          mkdir -p build/${{ matrix.artifact_name }}
          # Run the export command
          # Godot needs the target executable path
          godot --headless --export-release "${{ matrix.preset }}" "build/${{ matrix.artifact_name }}/${{ matrix.output_name }}" --verbose

      - name: Package Artifact (${{ matrix.platform }})
        run: |
          # Go into the main build directory
          cd build
          # Zip the entire directory created for this platform
          # e.g., zip -r game-windows.zip game-windows
          zip -r ${{ matrix.artifact_name }}.zip ${{ matrix.artifact_name }}
          # Go back to the project root
          cd ..

      - name: Upload Artifact (${{ matrix.platform }})
        uses: actions/upload-artifact@v4
        with:
          # Name of the artifact zip file on GitHub Actions
          name: ${{ matrix.artifact_name }}
          # Path to the zip file created in the previous step
          path: build/${{ matrix.artifact_name }}.zip
